// 'use client';

// import React, { useState, useEffect } from 'react';

// import { DataGrid } from '@mui/x-data-grid';
// import AddIcon from '@mui/icons-material/Add';
// import RefreshIcon from '@mui/icons-material/Refresh';
// import FlashOnIcon from '@mui/icons-material/FlashOn';
// import MoreHorizIcon from '@mui/icons-material/MoreHoriz';
// import FilterListIcon from '@mui/icons-material/FilterList';
// import {
//   Box,
//   Chip,
//   Tabs,
//   Button,
//   Dialog,
//   IconButton,
//   Typography,
//   DialogTitle,
//   DialogContent,
// } from '@mui/material';

// import { formatDateRange } from '../../../utils/formatDate';
// import { fetchAllData, fetchTaskTrackers } from '../../../services/fetchData';

// export default function DataTable() {
//   const [rows, setRows] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [statusMap, setStatusMap] = useState({});
//   const [priorityMap, setPriorityMap] = useState({});
//   const [ownerMap, setOwnerMap] = useState({});
//   const [teamMap, setTeamMap] = useState({});
//   const [taskTrackersData, setTaskTrackersData] = useState([]);
//   const [open, setOpen] = useState(false);
//   const [selectedProblem, setSelectedProblem] = useState('');

//   useEffect(() => {
//     const loadData = async () => {
//       setLoading(true);
//       const data = await fetchAllData();
//       if (data) {
//         setStatusMap(data.statuses);
//         setPriorityMap(data.priorities);
//         setOwnerMap(data.owners);
//         setTeamMap(data.teams);
//       }
//       const taskTrackers = await fetchTaskTrackers();
//       setTaskTrackersData(taskTrackers);
//       setLoading(false);
//     };

//     loadData();
//   }, []);

//   useEffect(() => {
//     if (taskTrackersData.length > 0) {
//       const mappedRows = taskTrackersData.map((row, index) => ({
//         id: row.trackerId || `temp-${index}`,
//         projectName: row.projectName,
//         problem: row.problem || 'No issue reported',
//         status: row.status?.statusName || 'Unknown',
//         owner: row.owner?.ownerName || 'N/A',
//         priority: row.priority?.priorityName || 'Unknown',
//         team: row.team?.teamName || 'N/A',
//         start_date: formatDateRange(row.startDate, row.endDate, row.createDate),
//         link: row.link ? row.link : 'N/A',
//         comment: row.comment !== undefined ? row.comment : 'No comment',
//         work: row.work !== undefined ? row.work : 'No work',
//       }));

//       setRows(mappedRows);
//     }
//   }, [taskTrackersData]);

//   const handleOpenDialog = (problem) => {
//     setSelectedProblem(problem);
//     setOpen(true);
//   };

//   const handleCloseDialog = () => {
//     setOpen(false);
//     setSelectedProblem('');
//   };

//   const columns = [
//     { field: 'projectName', headerName: 'Project Name', flex: 1 },
//     {
//       field: 'problem',
//       headerName: 'Problem',
//       flex: 1,
//       renderCell: (params) => (
//         <Typography variant="body2" onClick={() => handleOpenDialog(params.value)}>
//           {params.value.length > 20 ? `${params.value.substring(0, 20)}...` : params.value}
//         </Typography>
//       ),
//     },
//     {
//       field: 'status',
//       headerName: 'Status',
//       flex: 1,
//       renderCell: (params) => (
//         <Chip
//           label={params.value}
//           color={
//             params.value === 'In progress'
//               ? 'primary'
//               : params.value === 'On Hold'
//                 ? 'warning'
//                 : params.value === 'Completed'
//                   ? 'success'
//                   : params.value === 'Cancelled'
//                     ? 'error'
//                     : params.value === 'Backlog' // เพิ่มเงื่อนไขสำหรับ "Backlog"
//                       ? 'default' // ใช้สีเทาอ่อน (สี default ของ Chip)
//                       : 'default'
//           }
//           sx={{
//             backgroundColor: params.value === 'Backlog' ? '#D3D3D3' : undefined, // สีเทาอ่อนสำหรับ "Backlog"
//             color: params.value === 'Backlog' ? '#000' : undefined, // เปลี่ยนสีข้อความเป็นดำสำหรับ "Backlog"
//           }}
//         />
//       ),
//     },
//     { field: 'owner', headerName: 'Owner', flex: 1 },
//     {
//       field: 'priority',
//       headerName: 'Priority',
//       flex: 1,
//       renderCell: (params) => (
//         <Chip
//           label={params.value}
//           color={
//             params.value === 'High' ? 'error' : params.value === 'Medium' ? 'warning' : 'primary'
//           }
//         />
//       ),
//     },
//     { field: 'team', headerName: 'Team', flex: 1 },
//     { field: 'work', headerName: '% Work', flex: 1 },
//     {
//       field: 'start_date',
//       headerName: 'Date',
//       flex: 1,
//       renderCell: (params) => (params.value ? params.value : 'N/A'),
//     },
//     {
//       field: 'link',
//       headerName: 'Link',
//       flex: 0.5,
//       renderCell: (params) =>
//         params.value && params.value !== 'N/A' ? (
//           <a href={params.value} target="_blank" rel="noopener noreferrer">
//             {params.value}
//           </a>
//         ) : (
//           'N/A'
//         ),
//     },
//     { field: 'comment', headerName: 'comment', flex: 1 },
//   ];

//   return (
//     <Box sx={{ height: 650, width: '100%', padding: 2, backgroundColor: 'white' }}>
//       <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
//         <Tabs value={0} textColor="primary" indicatorColor="primary" />
//         <Box sx={{ display: 'flex', gap: 1 }}>
//           <IconButton color="default" onClick={() => window.location.reload()}>
//             <RefreshIcon />
//           </IconButton>
//           <IconButton color="default">
//             <FilterListIcon />
//           </IconButton>
//           <IconButton color="default">
//             <FlashOnIcon />
//           </IconButton>
//           <IconButton color="default">
//             <MoreHorizIcon />
//           </IconButton>
//           <Button variant="contained" color="primary" startIcon={<AddIcon />}>
//             New
//           </Button>
//         </Box>
//       </Box>
//       <DataGrid
//         rows={rows}
//         columns={columns}
//         pageSizeOptions={[5, 10, 20]}
//         pagination
//         loading={loading}
//       />

//       {/* Dialog แสดงรายละเอียดปัญหา */}
//       <Dialog open={open} onClose={handleCloseDialog} fullWidth maxWidth="sm">
//         <DialogTitle>Problem Details</DialogTitle>
//         <DialogContent>
//           <Typography variant="body1">{selectedProblem}</Typography>
//         </DialogContent>
//       </Dialog>
//     </Box>
//   );
// }
